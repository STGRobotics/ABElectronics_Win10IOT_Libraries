<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ABElectronics_Win10IOT_Libraries</name>
    </assembly>
    <members>
        <member name="M:ABElectronics_Win10IOT_Libraries.ABE_Helpers.UpdateByte(System.Byte,System.Byte,System.Boolean)">
            <summary>
            Updates the value of a single bit within a byte and returns the updated byte
            </summary>
            <param name="value">The byte to update</param>
            <param name="position">Position of the bit to change</param>
            <param name="bitstate">The new bit value</param>
            <returns></returns>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.ABE_Helpers.CheckBit(System.Byte,System.Byte)">
            <summary>
            Checks the value of a single bit within a byte
            </summary>
            <param name="value">The value to query</param>
            <param name="position">The bit position within the byte</param>
            <returns></returns>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.ABE_Helpers.WriteI2CByte(Windows.Devices.I2c.I2cDevice,System.Byte,System.Byte)">
            <summary>
            Writes a single byte to an I2C device.
            </summary>
            <param name="bus">I2C device</param>
            <param name="register">Address register</param>
            <param name="value">Value to write to the register</param>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.ABE_Helpers.ReadI2CByte(Windows.Devices.I2c.I2cDevice,System.Byte)">
            <summary>
            Read a single byte from an I2C device
            </summary>
            <param name="bus">I2C device</param>
            <param name="register">Address register to read from</param>
            <returns></returns>
        </member>
        <member name="T:ABElectronics_Win10IOT_Libraries.ADCDACPi">
            <summary>
            Class for accessing the ADCDAC Pi from AB Electronics UK.
            </summary>
        </member>
        <member name="P:ABElectronics_Win10IOT_Libraries.ADCDACPi.IsConnected">
            <summary>
            Event triggers when a connection is established.
            </summary>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.ADCDACPi.#ctor">
            <summary>
            Create an instance of the ADCDACPi class.
            </summary>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.ADCDACPi.Connect">
            <summary>
            Open a connection to the ADCDAC Pi
            </summary>
        </member>
        <member name="E:ABElectronics_Win10IOT_Libraries.ADCDACPi.Connected">
            <summary>
            Event occurs when connection is made
            </summary>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.ADCDACPi.ReadADCVoltage(System.Byte)">
            <summary>
            Read the voltage from the selected channel on the ADC
            </summary>
            <param name="channel">1 or 2</param>
            <returns>voltage</returns>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.ADCDACPi.ReadADCRaw(System.Byte)">
            <summary>
            Read the raw value from the selected channel on the ADC
            </summary>
            <param name="channel">1 or 2</param>
            <returns>Integer</returns>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.ADCDACPi.SetADCrefVoltage(System.Double)">
            <summary>
            set the reference voltage for the analogue to digital converter. The ADC uses the raspberry pi 3.3V power as a voltage reference so using this method to set the reference to match the exact output voltage from the 3.3V regulator will increase the accuracy of the ADC readings.
            </summary>
            <param name="voltage">double</param>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.ADCDACPi.SetDACVoltage(System.Byte,System.Double)">
            <summary>
            Set the voltage for the selected channel on the DAC
            </summary>
            <param name="channel">1 or 2</param>
            <param name="voltage">Voltage can be between 0 and 2.047 volts</param>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.ADCDACPi.SetDACRaw(System.Byte,System.Int16)">
            <summary>
            Set the raw value from the selected channel on the DAC
            </summary>
            <param name="channel">1 or 2</param>
            <param name="voltage">Value between 0 and 4095</param>
        </member>
        <member name="T:ABElectronics_Win10IOT_Libraries.ADCPi">
            <summary>
            Class for controlling the ADC Pi and ADC Pi Plus expansion boards from AB Electronics UK
            </summary>
        </member>
        <member name="P:ABElectronics_Win10IOT_Libraries.ADCPi.Address1">
            <summary>
            I2C address for the U1 (channels 1 - 4)
            </summary>
        </member>
        <member name="P:ABElectronics_Win10IOT_Libraries.ADCPi.Address2">
            <summary>
            I2C address for the U2 (channels 5 - 8)
            </summary>
        </member>
        <member name="P:ABElectronics_Win10IOT_Libraries.ADCPi.IsConnected">
            <summary>
            Shows if there is a connection with the ADC Pi
            </summary>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.ADCPi.#ctor(System.Byte,System.Byte)">
            <summary>
            Instance of a ADC Pi bus
            </summary>
            <param name="i2caddress1">I2C address for the U1 (channels 1 - 4)</param>
            /// <param name="i2caddress2">I2C address for the U2 (channels 5 - 8)</param>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.ADCPi.Connect">
            <summary>
            Open a connection with the ADC Pi
            </summary>
        </member>
        <member name="E:ABElectronics_Win10IOT_Libraries.ADCPi.Connected">
            <summary>
            Event occurs when connection is made
            </summary>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.ADCPi.SetChannel(System.Byte)">
            <summary>
            internal method for updating the configuration to the selected channel
            </summary>
            <param name="channel">ADC channel, 1 - 8</param>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.ADCPi.ReadVoltage(System.Byte)">
            <summary>
            Returns the voltage from the selected ADC channel
            </summary>
            <param name="channel">1 to 8</param>
            <returns></returns>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.ADCPi.ReadRaw(System.Byte)">
            <summary>
            Reads the raw value from the selected ADC channel
            </summary>
            <param name="channel">1 to 8</param>
            <returns>raw integer value from ADC buffer</returns>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.ADCPi.SetPGA(System.Byte)">
            <summary>
            Programmable Gain Amplifier gain selection
            </summary>
            <param name="gain">Set to 1, 2, 4 or 8</param>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.ADCPi.SetBitRate(System.Byte)">
            <summary>
            Set the sample resolution
            </summary>
            <param name="rate">12 = 12 bit(240SPS max), 14 = 14 bit(60SPS max), 16 = 16 bit(15SPS max), 18 = 18 bit(3.75SPS max)</param>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.ADCPi.SetConversionMode(System.Boolean)">
            <summary>
            Set the conversion mode for ADC
            </summary>
            <param name="mode">0 = One shot conversion mode, 1 = Continuous conversion mode</param>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.ADCPi.Dispose">
            <summary>
            Dispose of the ADCPi instance.
            </summary>
        </member>
        <member name="T:ABElectronics_Win10IOT_Libraries.DeltaSigmaPi">
            <summary>
            Class for controlling the Delta-Sigma Pi expansion board from AB Electronics UK
            </summary>
        </member>
        <member name="P:ABElectronics_Win10IOT_Libraries.DeltaSigmaPi.Address1">
            <summary>
            I2C address for the U1 (channels 1 - 4)
            </summary>
        </member>
        <member name="P:ABElectronics_Win10IOT_Libraries.DeltaSigmaPi.Address2">
            <summary>
            I2C address for the U2 (channels 5 - 8)
            </summary>
        </member>
        <member name="P:ABElectronics_Win10IOT_Libraries.DeltaSigmaPi.IsConnected">
            <summary>
            Shows if there is a connection with the ADC Pi
            </summary>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.DeltaSigmaPi.#ctor(System.Byte,System.Byte)">
            <summary>
            Instance of a Delta-Sigma Pi bus
            </summary>
            <param name="i2caddress1">I2C address for the U1 (channels 1 - 4)</param>
            /// <param name="i2caddress2">I2C address for the U2 (channels 5 - 8)</param>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.DeltaSigmaPi.Connect">
            <summary>
            Open a connection with the Delta-Sigma Pi
            </summary>
        </member>
        <member name="E:ABElectronics_Win10IOT_Libraries.DeltaSigmaPi.Connected">
            <summary>
            Event occurs when connection is made
            </summary>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.DeltaSigmaPi.SetChannel(System.Byte)">
            <summary>
            internal method for updating the configuration to the selected channel
            </summary>
            <param name="channel">ADC channel, 1 - 8</param>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.DeltaSigmaPi.ReadVoltage(System.Byte)">
            <summary>
            Returns the voltage from the selected ADC channel
            </summary>
            <param name="channel">1 to 8</param>
            <returns></returns>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.DeltaSigmaPi.ReadRaw(System.Byte)">
            <summary>
            Reads the raw value from the selected ADC channel
            </summary>
            <param name="channel">1 to 8</param>
            <returns>raw integer value from ADC buffer</returns>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.DeltaSigmaPi.SetPGA(System.Byte)">
            <summary>
            Programmable Gain Amplifier gain selection
            </summary>
            <param name="gain">Set to 1, 2, 4 or 8</param>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.DeltaSigmaPi.SetBitRate(System.Byte)">
            <summary>
            Set the sample resolution
            </summary>
            <param name="rate">12 = 12 bit(240SPS max), 14 = 14 bit(60SPS max), 16 = 16 bit(15SPS max), 18 = 18 bit(3.75SPS max)</param>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.DeltaSigmaPi.SetConversionMode(System.Boolean)">
            <summary>
            Set the conversion mode for ADC
            </summary>
            <param name="mode">0 = One shot conversion mode, 1 = Continuous conversion mode</param>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.DeltaSigmaPi.Dispose">
            <summary>
            Dispose of the DeltaSigmaPi instance.
            </summary>
        </member>
        <member name="T:ABElectronics_Win10IOT_Libraries.IOPi">
            <summary>
            Class for controlling the IO Pi and IO Pi Plus expansion boards from AB Electronics UK
            Based on the MCP23017 IO expander IC from Microchip
            </summary>
        </member>
        <member name="P:ABElectronics_Win10IOT_Libraries.IOPi.Address">
            <summary>
            I2C address for the IO Pi bus
            </summary>
        </member>
        <member name="P:ABElectronics_Win10IOT_Libraries.IOPi.IsConnected">
            <summary>
            Shows if there is a connection with the IO Pi
            </summary>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.IOPi.#ctor(System.Byte)">
            <summary>
            Instance of an IOPi bus
            </summary>
            <param name="i2caddress">I2C Address of IO Pi bus</param>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.IOPi.Connect">
            <summary>
            Open a connection with the IO Pi
            </summary>
            <returns></returns>
        </member>
        <member name="E:ABElectronics_Win10IOT_Libraries.IOPi.Connected">
            <summary>
            Event occurs when connection is made
            </summary>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.IOPi.SetPinDirection(System.Byte,System.Boolean)">
            <summary>
            Set IO direction for an individual pin.
            </summary>
            <param name="pin">1 to 16</param>
            <param name="direction">1 = input, 0 = output</param>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.IOPi.SetPortDirection(System.Byte,System.Byte)">
            <summary>
            Set the direction for an IO port.  You can control the direction of all 8 pins on a port by sending a single byte value.  Each bit in the byte represents one pin so for example 0x0A would set pins 2 and 4 to inputs and all other pins to outputs.
            </summary>
            <param name="direction">Direction for all pins on the port.  1 = input, 0 = output</param>
            <param name="port">0 = pins 1 to 8, 1 = pins 9 to 16</param>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.IOPi.SetPinPullup(System.Byte,System.Boolean)">
            <summary>
            Set the internal 100K pull-up resistors for an individual pin 
            </summary>
            <param name="pin">1 to 16</param>
            <param name="value">true = enabled, false = disabled</param>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.IOPi.SetPortPullups(System.Byte,System.Byte)">
            <summary>
            set the internal 100K pull-up resistors for the selected IO port
            </summary>
            <param name="port">0 = pins 1 to 8, 1 = pins 9 to 16</param>
            <param name="value">number between 0 and 255 or 0x00 and 0xFF</param>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.IOPi.WritePin(System.Byte,System.Boolean)">
            <summary>
            write to an individual pin 
            </summary>
            <param name="pin">1 - 16</param>
            <param name="value">0 = logic low, 1 = logic high</param>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.IOPi.WritePort(System.Byte,System.Byte)">
            <summary>
            write to all pins on the selected port.
            </summary>
            <param name="port">0 = pins 1 to 8, 1 = pins 9 to 16</param>
            <param name="value">number between 0 and 255 or 0x00 and 0xFF</param>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.IOPi.ReadPin(System.Byte)">
            <summary>
            read the value of an individual pin. 
            </summary>
            <param name="pin">1 - 16</param>
            <returns>0 = logic level low, 1 = logic level high</returns>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.IOPi.ReadPort(System.Byte)">
            <summary>
            read all pins on the selected port.
            </summary>
            <param name="port">0 = pins 1 to 8, 1 = pins 9 to 16</param>
            <returns>returns number between 0 and 255 or 0x00 and 0xFF</returns>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.IOPi.InvertPort(System.Byte,System.Byte)">
            <summary>
            invert the polarity of the pins on a selected port.
            </summary>
            <param name="port">0 = pins 1 to 8, 1 = pins 9 to 16</param>
            <param name="polarity">0x00 - 0xFF (0 = same logic state of the input pin, 1 = inverted logic state of the input pin)</param>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.IOPi.InvertPin(System.Byte,System.Boolean)">
            <summary>
            invert the polarity of the selected pin.
            </summary>
            <param name="pin">1 to 16</param>
            <param name="polarity">False = same logic state of the input pin, True = inverted logic state of the input pin</param>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.IOPi.MirrorInterrupts(System.Byte)">
            <summary>
            Sets the mirror status of the interrupt pins.
            </summary>
            <param name="value">0 = The INT pins are not mirrored. INTA is associated with PortA and INTB is associated with PortB. 1 = The INT pins are internally connected</param>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.IOPi.SetInterruptPolarity(System.Byte)">
            <summary>
            This sets the polarity of the INT output pins
            </summary>
            <param name="value">1 = Active - high. 0 = Active - low.</param>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.IOPi.SetInterruptType(System.Byte,System.Byte)">
            <summary>
            Sets the type of interrupt for each pin on the selected port. 1 = interrupt is fired when the pin matches the default value. 0 = the interrupt is fired on state change
            </summary>
            <param name="port">0 = pins 1 to 8, 1 = pins 9 to 16</param>
            <param name="value">number between 0 and 255 or 0x00 and 0xFF</param>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.IOPi.SetInterruptDefaults(System.Byte,System.Byte)">
            <summary>
            These bits set the compare value for pins configured for interrupt-on-change on the selected port. If the associated pin level is the opposite from the register bit, an interrupt occurs.
            </summary>
            <param name="port">0 = pins 1 to 8, 1 = pins 9 to 16</param>
            <param name="value">number between 0 and 255 or 0x00 and 0xFF</param>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.IOPi.SetInterruptOnPort(System.Byte,System.Byte)">
            <summary>
            Enable interrupts for the pins on the selected port.
            </summary>
            <param name="port">0 = pins 1 to 8, 1 = pins 9 to 16</param>
            <param name="value">number between 0 and 255 or 0x00 and 0xFF</param>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.IOPi.SetInterruptOnPin(System.Byte,System.Boolean)">
            <summary>
            Enable interrupts for the selected pin.
            </summary>
            <param name="pin">1 to 16</param>
            <param name="value">0 = interrupt disabled, 1 = interrupt enabled</param>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.IOPi.ReadInterruptStatus(System.Byte)">
            <summary>
            read the interrupt status for the pins on the selected port.
            </summary>
            <param name="port">0 = pins 1 to 8, 1 = pins 9 to 16</param>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.IOPi.ReadInterruptCapture(System.Byte)">
            <summary>
            read the value from the selected port at the time of the last interrupt trigger. 
            </summary>
            <param name="port">0 = pins 1 to 8, 1 = pins 9 to 16</param>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.IOPi.ResetInterrupts">
            <summary>
            Reset the interrupts A and B to 0
            </summary>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.IOPi.Dispose">
            <summary>
            Dispose of the I2C device
            </summary>
        </member>
        <member name="T:ABElectronics_Win10IOT_Libraries.RTCPi">
            <summary>
            Class for controlling the RTC Pi and RTC Pi Plus expansion boards from AB Electronics UK
            Based on the DS1307 real-time clock from Maxim
            </summary>
        </member>
        <member name="P:ABElectronics_Win10IOT_Libraries.RTCPi.IsConnected">
            <summary>
            Shows if there is a connection with the RTC Pi
            </summary>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.RTCPi.#ctor">
            <summary>
            Instance of a RTC Pi bus
            </summary>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.RTCPi.Connect">
            <summary>
            Open a connection with the RTC Pi
            </summary>
            <returns></returns>
        </member>
        <member name="E:ABElectronics_Win10IOT_Libraries.RTCPi.Connected">
            <summary>
            Event occurs when connection is made
            </summary>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.RTCPi.BCDtoInt(System.Byte)">
            <summary>
            Converts BCD format to integer
            </summary>
            <param name="x">BCD formatted byte</param>
            <returns></returns>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.RTCPi.BytetoBCD(System.Int32)">
            <summary>
            Converts byte to BCD format
            </summary>
            <param name="val">value to convert</param>
            <returns></returns>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.RTCPi.SetDate(System.DateTime)">
            <summary>
            Set the date and time on the RTC
            </summary>
            <param name="date">DateTime</param>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.RTCPi.ReadDate">
            <summary>
            Read the date and time from the RTC
            </summary>
            <returns>DateTime</returns>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.RTCPi.EnableOutput">
            <summary>
            Enable the clock output pin
            </summary>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.RTCPi.DisableOutput">
            <summary>
            Disable the clock output pin
            </summary>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.RTCPi.SetFrequency(System.Byte)">
            <summary>
            Set the frequency of the output pin square-wave
            </summary>
            <param name="frequency">options are: 1 = 1Hz, 2 = 4.096KHz, 3 = 8.192KHz, 4 = 32.768KHz</param>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.RTCPi.Dispose">
            <summary>
            Dispose if the RTC Pi device
            </summary>
        </member>
        <member name="T:ABElectronics_Win10IOT_Libraries.ServoPi">
            <summary>
            Class for controlling the Servo Pi expansion board from AB Electronics UK
            Based on the PCA9685 PWM controller IC from NXT
            </summary>
        </member>
        <member name="P:ABElectronics_Win10IOT_Libraries.ServoPi.Address">
            <summary>
            I2C address for the Servo Pi bus
            </summary>
            <example>servopi.Address = 0x40;</example>
        </member>
        <member name="P:ABElectronics_Win10IOT_Libraries.ServoPi.OutputEnablePin">
            <summary>
            Set the GPIO pin for the output enable function.
            The default GPIO pin 4 is not supported in Windows 10 IOT so the OE pad will need to be connected to a different GPIO pin.
            </summary>
            <example>servopi.OutputEnablePin = 17;</example>
        </member>
        <member name="P:ABElectronics_Win10IOT_Libraries.ServoPi.IsConnected">
            <summary>
            Shows if there is a connection with the Servo Pi
            </summary>
            <example>if (servopi.IsConnected) { }</example>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.ServoPi.#ctor(System.Byte)">
            <summary>
            Instance of a Servo Pi bus
            </summary>
            <param name="address">I2C address of Servo Pi bus</param>
            <example>ABElectronics_Win10IOT_Libraries.ServoPi servo = new ABElectronics_Win10IOT_Libraries.ServoPi();</example>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.ServoPi.Connect">
            <summary>
            Open a connection with the Servo Pi
            </summary>
            <returns></returns>
            <example>servopi.Connect();</example>
        </member>
        <member name="E:ABElectronics_Win10IOT_Libraries.ServoPi.Connected">
            <summary>
            Event occurs when connection is made
            </summary>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.ServoPi.SetPWMFreqency(System.Int32)">
            <summary>
            Set the output frequency of all PWM channels. The output frequency is programmable from a typical 40Hz to 1000Hz
            </summary>
            <param name="freq">Integer frequency value</param>
            <example>servopi.SetPWMFreqency(500);</example>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.ServoPi.SetPWM(System.Byte,System.Int16,System.Int16)">
            <summary>
            Set the PWM output on a single channel
            </summary>
            <param name="channel">1 to 16</param>
            <param name="on">Value between 0 and 4096</param>
            <param name="off">Value between 0 and 4096</param>
            <example>servopi.SetPWM(1,512,1024);</example> 
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.ServoPi.SetAllPWM(System.Int16,System.Int16)">
            <summary>
            Set PWM output on all channels
            </summary>
            <param name="on">Value between 0 and 4096</param>
            <param name="off">Value between 0 and 4096</param>
            <example>servopi.SetAllPWM(512,1024);</example>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.ServoPi.OutputDisable">
            <summary>
            Disable output via OE pin.  Only used when the OE jumper is joined.
            </summary>
            <example>servopi.OutputDisable();</example>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.ServoPi.OutputEnable">
            <summary>
            Enable output via OE pin.  Only used when the OE jumper is joined.
            </summary>
            <example>servopi.OutputEnable();</example>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.ServoPi.Dispose">
            <summary>
            Dispose of the Servo Pi device
            </summary>
            <example>servopi.Dispose();</example>
        </member>
    </members>
</doc>
